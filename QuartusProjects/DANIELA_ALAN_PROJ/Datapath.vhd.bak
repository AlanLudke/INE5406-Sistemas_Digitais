library ieee;
use ieee.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;


entity Datapath is -- Bloco que reune os blocos que realizam operações
port ( 
	CLOCK_50, RESET, ENABLE_registradorMuxROMs, ENABLE_registradorComparador, ENABLE_xxx: in std_logic;
	SW: in std_logic_vector(9 downto 0);
	HEX0, HEX1, HEX2, HEX3, HEX4, HEX5: out std_logic_vector(6 downto 0);
	LEDR : out std_logic_vector (9 downto 0);
	tc: out std_logic
);
end Datapath;
architecture topo_stru of Datapath is

signal saida_Contador1, saida_Contador2: std_logic_vector(3 downto 0);
signal C1,C2,C3,C4 : std_logic;
signal saida_Mux4x1Clock, saida_Comparador, tc_fantasma: std_logic;
signal ROM01, ROM02, ROM03, ROM04: std_logic_vector(7 downto 0);
signal saida_registradorMuxROMs: std_logic_vector (1 downto 0);
signal saida_multiplexadorROM, saida_muxResultado: std_logic_vector (7 downto 0);
signal usuario, saida_pontos: std_logic_vector (7 downto 0);
signal enable_clock_contador: std_logic;

----------------------------------------------
component ContadorClock is
port (Clock: in std_logic;
		Reset: in std_logic;
		CLK1, CLK2, CLK3, CLK4: out std_logic
);
end component;

component mux4x1Clock is
port (w, x, y, z: in std_logic;
	SW: in std_logic_vector(9 downto 8);
	C: out std_logic
	);
end component;

component decod7segLevel is
port (C: in std_logic_vector(3 downto 0);
		F: out std_logic_vector(6 downto 0)
);
end component;
---------------------------------------------
component contador is
port(
	RESET: in std_logic;
	ENABLE: in std_logic;
	CLOCK_50: in std_logic;
	saida: out std_logic_vector(3 downto 0);
	tc: out std_logic
);
end component;

component multiplexadorROM is
port (selecao: in std_logic_vector(1 downto 0);
	  ROM1: in std_logic_vector (7 downto 0);
	  ROM2: in std_logic_vector (7 downto 0);
	  ROM3: in std_logic_vector (7 downto 0);
	  ROM4: in std_logic_vector (7 downto 0);
	  saida: out std_logic_vector (7 downto 0)
	  );
end component;

component ROM1 is
  port ( address : in std_logic_vector(3 downto 0);
         data : out std_logic_vector(7 downto 0) 
			);
end component;

component ROM2 is
  port ( address : in std_logic_vector(3 downto 0);
         data : out std_logic_vector(7 downto 0) 
			);
end component;
component ROM3 is
  port ( address : in std_logic_vector(3 downto 0);
         data : out std_logic_vector(7 downto 0)
			);
end component;
component ROM4 is
  port ( address : in std_logic_vector(3 downto 0);
         data : out std_logic_vector(7 downto 0) 
			);
end component;

component registradorMuxROMs is
port(
	RESET: in std_logic;
	ENABLE: in std_logic;
	SW: in std_logic_vector(1 downto 0);
	CLOCK_50: in std_logic;
	saida: out std_logic_vector(1 downto 0)
);
end component;

component registradorComparador is
port(
	RESET: in std_logic;
	ENABLE: in std_logic;
	SW: in std_logic_vector(7 downto 0);
	CLOCK_50: in std_logic;
	saida: out std_logic_vector(7 downto 0)
);
end component;

--------------------------------------------------\
component Comparador is
port(SaidaMux: in std_logic_vector(7 downto 0);
		SaidaReg: in std_logic_vector(7 downto 0);
		SaidaComparador : out std_logic
		);
end component;

component DecodLED is
port (C: in std_logic_vector(3 downto 0);
		F: out std_logic_vector(9 downto 0)
		);
end component;

component decod7seg is
port (C: in std_logic_vector(3 downto 0);
		F: out std_logic_vector(6 downto 0)
);
end component;

component multiplexadorResultado is
port (SW: in std_logic_vector(9 downto 8);
		EntradaMux: in std_logic_vector(3 downto 0);
		saida: out std_logic_vector (7 downto 0)
	  );
end component;


begin


HEX5<= "1000111";

L0: ContadorClock port map (CLOCK_50, RESET, C1, C2, C3, C4);  
L1: mux4x1Clock port map (C1, C2, C3, C4, SW(9 downto 8), saida_Mux4x1Clock);  
L2: decod7seg port map ("00" & SW(9 downto 8), HEX4); 
L3: contador port map (RESET, ENABLE_xxx, saida_Mux4x1Clock, saida_Contador1, tc);
 
L4 : ROM1 port map(saida_Contador1, ROM01);
L5 : ROM2 port map(saida_Contador1, ROM02);
L6 : ROM3 port map(saida_Contador1, ROM03);
L7 : ROM4 port map(saida_Contador1, ROM04);

L9: registradorMuxROMs port map (RESET, ENABLE_registradorMuxROMs, SW(1 downto 0),CLOCK_50,  saida_registradorMuxROMs);
L8: multiplexadorROM port map (saida_registradorMuxROMs, ROM01, ROM02, ROM03, ROM04, saida_multiplexadorROM);

-------------------------------------------------------------------------------------------------------------
L10: decod7seglevel port map(saida_multiplexadorROM(7 downto 4), HEX1);---------------------------------------------------
L11: decod7seglevel port map(saida_multiplexadorROM(3 downto 0), HEX0);---------------------------------------------------
L12: registradorComparador port map (RESET, ENABLE_registradorComparador, SW(7 downto 0), saida_Mux4x1Clock, usuario);
L13: Comparador port map (saida_multiplexadorROM, usuario, saida_Comparador);
L14: contador port map (RESET, saida_Comparador, saida_Mux4x1Clock, saida_Contador2, tc_fantasma);
L15: DecodLED port map (saida_Contador2, LEDR(9 downto 0));
L16: multiplexadorResultado port map (SW(9 downto 8), saida_Contador2,saida_muxResultado);
L17: registradorComparador port map (RESET, ENABLE_registradorComparador, saida_muxResultado, saida_Mux4x1Clock, saida_pontos);
L18: decod7seg port map(saida_pontos(7 downto 4), HEX3);
L19: decod7seg port map(saida_pontos(3 downto 0), HEX2);

end topo_stru;